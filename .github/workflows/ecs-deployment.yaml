name: Build Docker Image and Deploy to ECS
on:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  NODE_DOCKER_IMAGE: elearning-auth-repo
  REACT_DOCKER_IMAGE: elearning-react-app
  AWS_REGION: us-east-1
  TASK_DEFINITION_FAMILY: ECS_Elearning_Task_Definition_Family
  NODE_CONTAINER_NAME: elearning_api
  REACT_CONTAINER_NAME: elearning_react_app
  ECS_CLUSTER_NAME: ECS_Elearning_Cluster
  ECS_SERVICE_NAME: ECS_Elearning_Task_Definition_Family-service-j1md2ism
jobs:
  build-image-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add details to the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKER_USER_NAME}}/${{env.NODE_DOCKER_IMAGE}}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            latest
            v1.0.${{ github.run_number }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build and push Node.js Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./elearning-auth
          file: ./elearning-auth/Dockerfile.prod
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}

  build-image-react:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Add details to the Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKER_USER_NAME}}/${{env.REACT_DOCKER_IMAGE}}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            latest
            v1.0.${{ github.run_number }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: network=host

      - name: Build and push React.js Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./learninghub
          file: ./learninghub/Dockerfile.prod
          push: true
          platforms: linux/amd64,linux/arm64
          build-args: |
            REACT_APP_API_URL=http://ecselearninglbv2-638976939.us-east-1.elb.amazonaws.com/api
          tags: ${{ steps.meta.outputs.tags }}

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: [build-image-node, build-image-react]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.AWS_REGION}}

      - name: Render Amazon ECS task definition for Node.js
        id: render-node-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.TASK_DEFINITION_FAMILY }}
          container-name: ${{ env.NODE_CONTAINER_NAME }}
          image: ${{ vars.DOCKER_USER_NAME }}/${{ env.NODE_DOCKER_IMAGE }}
      
      - name: Render Amazon ECS task definition for React
        id: render-react-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-node-container.outputs.task-definition }}
          container-name: ${{ env.REACT_CONTAINER_NAME }}
          image: ${{ vars.DOCKER_USER_NAME }}/${{ env.REACT_DOCKER_IMAGE }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-react-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
